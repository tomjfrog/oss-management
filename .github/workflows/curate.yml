name: Curate an OSS Package

permissions:
  id-token: write

on:
  workflow_dispatch:

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      packageType: ${{ steps.extract-package-type.outputs.packageType }}
      packageRequest: ${{ steps.extract-package-request.outputs.packageRequest }}
      accessToken: ${{ steps.setup-jfrog-cli.outputs.oidc-token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-jfrog-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github

      - name: List Package Managers
        id: list-package-manager
        run: |
          echo NPM Version: $(npm --version)
          echo Maven Version: $(mvn --version)
          echo Pip Version: $(pip --version)
          echo Docker Version: $(docker --version)

      - name: Extract and set packageType
        id: extract-package-type
        run: |
          packageType=$(jq -r '.packageType' < input/requested-packages.json)
          echo "packageType=$packageType" >> $GITHUB_OUTPUT

      - name: Validate Package Type
        id: validate-package-type
        run: |
          echo ${{ steps.extract-package-type.outputs.packageType }}

  curate-python:
    runs-on: ubuntu-latest
    needs: initialize
    if: ${{ needs.initialize.outputs.packageType == 'python' }}
    env:
      int_artifactory_user: 'tomj@jfrog.com'
      int_artifactory_apikey: ${{ secrets.JF_ACCESS_TOKEN }}
      int_artifactory_url: 'https://tomjfrog.jfrog.io/artifactory'
      local_repo_name: 'scans-python-local'
      remote_repo_name: 'preapprove-python-remote'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.15

      - name: Validate Inputs
        id: validate-inputs
        run: |
          res_curatepypi_payload=${{ needs.initialize.outputs.packageType }}
          echo "res_curatepypi_payload=$res_curatepypi_payload" >> $GITHUB_ENV

      - name: Extract Package Request
        id: extract-package-request
        run: |
          packageRequest=$(jq -c '.' < ./input/requested-packages.json)
          echo "packageRequest=$packageRequest" >> $GITHUB_OUTPUT

      - name: Run Python Job
        working-directory: ./pip
        env:
          res_curatepypi_payload: ${{ steps.extract-package-request.outputs.packageRequest }}
        run: |
          echo "Running Python-specific job"
          python curate-python.py

  curate-maven:
    runs-on: ubuntu-latest
    needs: initialize
    if: ${{ needs.initialize.outputs.packageType == 'maven' }}
    env:
      int_artifactory_user: 'tomj@jfrog.com'
      int_artifactory_apikey: ${{ secrets.JF_ACCESS_TOKEN }}
      int_artifactory_url: 'https://tomjfrog.jfrog.io/artifactory'
      local_repo_name: 'scans-maven-local'
      remote_repo_name: 'preapprove-maven-remote'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Inputs
        id: validate-inputs
        run: |
          res_curatemaven_payload=${{ needs.initialize.outputs.packageType }}
          echo "res_curatemaven_payload=$res_curatemaven_payload" >> $GITHUB_ENV

      - name: Extract Package Request
        id: extract-package-request
        run: |
          packageRequest=$(jq -c '.' < ./input/requested-packages.json)
          echo "packageRequest=$packageRequest" >> $GITHUB_OUTPUT
      - name: Run Python Job
        working-directory: ./maven
        env:
          res_curatemaven_payload: ${{ steps.extract-package-request.outputs.packageRequest }}
        run: |
          echo "Running Maven curation job"
          python curate-maven.py